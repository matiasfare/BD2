----Matias Fare----
-- tema2 

CREATE OR REPLACE TYPE T_CIERRE AS OBJECT(
	ID_CUENTA NUMBER(8),
	FECHA_INICIO DATE,
	FECHA_CIERRE DATE,
	CREDITOS NUMBER(15),
	DEBITOS NUMBER(15),
	SALDO NUMBER(15),
	MONTO_INTERES NUMBER(15),
	
	MEMBER PROCEDURE CALCULAR_SALDO_PERIODO(P_ID_CUENTA NUMBER, P_FECHA_INICIO DATE, P_FECHA_CIERRE DATE),
	MEMBER PROCEDURE CALCULAR_INTERES
);
/

CREATE OR REPLACE TYPE BODY T_CIERRE AS 
	MEMBER PROCEDURE CALCULAR_SALDO_PERIODO(P_ID_CUENTA NUMBER, P_FECHA_INICIO DATE, P_FECHA_CIERRE DATE)
	IS
		BEGIN
		SELF.ID_CUENTA := P_ID_CUENTA;
		SELF.FECHA_INICIO := P_FECHA_INICIO;
		SELF.FECHA_CIERRE := P_FECHA_CIERRE;
		
		SELECT SUM(AMC.IMPORTE) SUM_CREDITOS INTO CREDITOS
		FROM AHO_MOVIMIENTOS_CUENTA AMC WHERE AMC.ID_CUENTA = SELF.ID_CUENTA
		AND AMC.ID_TIPO IN 
			(SELECT ID_TIPO FROM AHO_TIPO_MOVIMIENTO WHERE DEBITO_CREDITO LIKE '%C%')
			AND TRUNC(AMC.FECHA_MOVIMIENTO) BETWEEN TRUNC(SELF.FECHA_INICIO) AND TRUNC(SELF.FECHA_CIERRE);
		
		SELECT SUM(AMC.IMPORTE) SUM_DEBITOS INTO DEBITOS FROM AHO_MOVIMIENTOS_CUENTA AMC
		WHERE AMC.ID_CUENTA = P_ID_CUENTA  AND AMC.ID_TIPO IN 
			(SELECT ID_TIPO FROM AHO_TIPO_MOVIMIENTO WHERE DEBITO_CREDITO LIKE '%D%')
			AND TRUNC(AMC.FECHA_MOVIMIENTO) BETWEEN TRUNC(SELF.FECHA_INICIO) AND TRUNC(SELF.FECHA_CIERRE);
		
		SELF.SALDO := CREDITOS - DEBITOS;
		SELF.MONTO_INTERES := 0;
		END;
	MEMBER PROCEDURE CALCULAR_INTERES
	IS
			V_ID_SOCIO AHO_CUENTA_AHORRO%ROWTYPE;
			V_FECHA_APERTURA DATE;
			V_SALDO_REAL NUMBER;
			V_TIPO_CUENTA NUMBER;
			V_TASA_ANUAL NUMBER (5,2);
			V_PLAZO_MINIMO NUMBER;		
		CURSOR lev IS SELECT * FROM TRATAMIENTO WHERE FECHA_FIN IS NULL;
		BEGIN

			SELF.ID_CUENTA := 1;
			SELF.MONTO_INTERES := 0;
			
			SELECT 
			ACA.ID_SOCIO,
			ACA.FECHA_APERTURA,
			ACA.SALDO_REAL,
			ACA.TASA_INTERES,
			TA.ID,
			TA.TIPO_CUENTA,
			TA.TASA_ANUAL,
			TA.PLAZO_MINIMO
			INTO
			V_ID_SOCIO,
			V_FECHA_APERTURA,
			V_SALDO_REAL,
			V_TIPO_CUENTA,
			V_TASA_ANUAL,
			V_PLAZO_MINIMO
			FROM AHO_CUENTA_AHORRO ACA JOIN TARIFARIO TA
				ON ACA.ID_TARIFARIO=TA.ID
				WHERE  (ID_SOCIO = SELF.ID_CUENTA) AND (ACA.FECHA_APERTURA+PLAZO_MINIMO)< SYSDATE ;
					
			IF V_TIPO_CUENTA=2 THEN
				SELF.MONTO_INTERES := (V_SALDO_REAL*((V_TASA_ANUAL/360)*V_PLAZO_MINIMO)/100) ;
				--PARA VERFICIAR QUE FUE CORRECTO EL CALCULO
				DBMS_OUTPUT.PUT_LINE('MONTO_INTERES'||': '||SELF.MONTO_INTERES);
			ELSE
				DBMS_OUTPUT.PUT_LINE('no es una CUENTA CDA');
			END IF;
		END;
END;
/


----tema3-----

-- SQL> DESC AHO_MOVIMIENTOS_CUENTA
 -- Name                                      Null?    Type
 -- ----------------------------------------- -------- ----------------------------
 -- ID_MOVIMIENTO                             NOT NULL NUMBER(12)
 -- FECHA_MOVIMIENTO                          NOT NULL DATE
 -- IMPORTE                                   NOT NULL NUMBER(15)
 -- ID_TIPO                                   NOT NULL NUMBER(3)
 -- ID_CUENTA                                 NOT NULL NUMBER(8)
 
 
CREATE OR REPLACE TRIGGER INSERTO_AHO_MOVIMIENTO_CUENTA
FOR INSERT ON AHO_MOVIMIENTOS_CUENTA COMPOUND TRIGGER
BEFORE EACH ROW IS
	BEGIN
	V_SALDO_REAL NUMBER;
	V_SALDO_DISPONIBLE NUMBER;
	V_SALDO_BLOQUEADO NUMBER;
	V_PLAZO_MINIMO DATE;
	V_FECHA_APERTURA DATE;
	
	IF :NEW.ID_TIPO = 1 THEN -- 1 ES CUENTA CREDITO
		SELECT SALDO_REAL, SALDO_DISPONIBLE INTO V_SALDO_REAL, V_SALDO_DISPONIBLE FROM AHO_CUENTA_AHORRO WHERE ID_CUENTA = :NEW.ID_CUENTA;
		UPDATE SALDO_REAL,SALDO_DISPONIBLE VALUES (V_SALDO_REAL+:NEW.IMPORTE, V_SALDO_DISPONIBLE+:NEW.IMPORTE) FROM AHO_CUENTA_AHORRO ;
	ELSIF :NEW.ID_TIPO = 2 THEN -- 2 ES CUENTA DEBITO;
		SELECT SALDO_REAL, SALDO_DISPONIBLE, SALDO_BLOQUEADO INTO V_SALDO_REAL, V_SALDO_DISPONIBLE, V_SALDO_BLOQUEADO FROM AHO_CUENTA_AHORRO WHERE ID_CUENTA = :NEW.ID_CUENTA;
		IF :NEW.IMPORTE <= (V_SALDO_REAL - V_SALDO_BLOQUEADO) THEN
			UPDATE SALDO_REAL,SALDO_DISPONIBLE VALUES (SALDO_REAL-:NEW.IMPORTE, SALDO_DISPONIBLE-:NEW.IMPORTE) FROM AHO_CUENTA_AHORRO;
		IF :NEW.ID_TIPO = 2 THEN 
			IF (V_FECHA_APERTURA+V_PLAZO_MINIMO > SYSDATE) THEN
				RAISE_APPLICATION_ERROR(-20001,'ERROR INSESION');
			ELSE
				UPDATE SALDO_REAL,SALDO_DISPONIBLE VALUES (SALDO_REAL-:NEW.IMPORTE, SALDO_DISPONIBLE-:NEW.IMPORTE) FROM AHO_CUENTA_AHORRO;
			END IF;	
		ELSE
		 RAISE_APPLICATION_ERROR(-20001,'ERROR INSESION');
		END IF;
	END IF;
	
 END BEFORE EACH ROW;
END;



-------TEMA 4-----

CREATE MATERIALIZED VIEW V_SITUACION_SOCIO
REFRESH NEXT SYSDATE +1/24 
AS
	SELECT ID
		---ya nome alcanzo el timepo















